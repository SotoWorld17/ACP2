xlab("Distribución teórica") + ylab("Distribución muestral")
fareHist = ggplot(data=titanicData,aes(x = fare, y=after_stat(density))) +
geom_histogram(col="pink2",fill="pink",alpha=0.5,breaks=seq(0.00, 513, by=5),) +
labs(title="Histograma para las tarifas en el Titanic con separaciones", y="Edad") +
# Marcamos la media con una línea azul
geom_vline(xintercept = mean(titanicData$fare), col="royalblue3", linewidth = 0.6)+
# Y marcamos la mediana con una línea lila
geom_vline(xintercept = median(titanicData$fare), col="purple1", linewidth = 0.6)+
geom_density(alpha=0.2,fill="skyblue", color="skyblue3")+
# Marcamos líneas verticales separando los grupos de valores
geom_vline(xintercept = 200, col="orange")+
geom_vline(xintercept = 100, col="orange")
fareHist
grid.arrange(p3,p4, nrow=1)
colSums(is.na(titanicData))
titanicData_noAge = subset(titanicData, select = -age)
colSums(is.na(titanicData_noAge))
titanicData_noNulesinAge = titanicData[!is.na(titanicData$age),]
colSums(is.na(titanicData_noNulesinAge))
# Filas orginal
nrow(titanicData)
# Filas tras eliminar las que tenían NAs
nrow(titanicData_noNulesinAge)
titanicData_predict <- titanicData
mediana_edad <- median(titanicData$age, na.rm = TRUE)
titanicData_predict$age[is.na(titanicData$age)] <- mediana_edad
colSums(is.na(titanicData_predict))
# Filas original
nrow(titanicData)
#Filas tras la predicción
nrow(titanicData_predict)
val_nulos <-sum(is.na(titanicData$age))
desviacion <- sd(titanicData$age, na.rm = TRUE)
val_gauss <- rnorm(val_nulos, mean = mediana_edad, sd = desviacion)
titanicData_predict <- titanicData
titanicData_predict$age[is.na(titanicData$age)] <- val_gauss
colSums(is.na(titanicData_predict))
# Filas original
nrow(titanicData)
#Filas tras la predicción
nrow(titanicData_predict)
titanicData_noAge = na.omit(titanicData_noAge)
titanicData_noNulesinAge = na.omit(titanicData_noNulesinAge)
titanicData_predict = titanicData[!is.na(titanicData$embarked),]
titanicData = titanicData[!is.na(titanicData$embarked),]
rm(Alone); rm(Class); rm(Embarked); rm(Sex); rm(Who); rm(ageHist);
rm(p3); rm(p4); rm(parchBarplot); rm(sibspBarplot); rm(fareHist); rm(titanic);
rm(desviacion); rm(mediana_gauss); rm(val_gauss); rm(val_nulos); rm(mediana_edad)
titanicDataBonito=titanicData
titanicDataBonito$survived <- ifelse(titanicDataBonito$survived == 0, "Muere", ifelse(titanicDataBonito$survived == 1, "Sobrevive", titanicDataBonito$survived))
myplot = ggplot(data=titanicDataBonito, aes(x=sex, fill=survived, color = survived)) +
geom_bar(alpha=0.8, position="dodge")+
ggtitle("Relación entre el sexo y la variable de clase")+
labs(x = "Sexo",y="", fill = "Sexo") +
scale_color_manual(values = colorpieborde, name="sex")+
scale_fill_manual(values = colorspie, name="sex")
myplot
myplot = ggplot(data=titanicDataBonito, aes(x=embarked, fill=survived, color = survived)) +
geom_bar(alpha=0.8,position="dodge")+
ggtitle("Relación entre el lugar de embarque y la variable de clase")+
labs(x = "Embarque",y="") +
scale_color_manual(values = colorpieborde, name="embarked")+
scale_fill_manual(values = colorspie, name="embarked")
myplot
myplot = ggplot(data=titanicDataBonito, aes(x=class, fill=survived, color = survived)) +
geom_bar(alpha=0.8, position = "dodge")+
ggtitle("Relación entre la clase y la variable de clase")+
labs(x = "Clase",y="") +
scale_color_manual(values = colorpieborde, name="class")+
scale_fill_manual(values = colorspie, name="class")
myplot
myplot = ggplot(data=titanicDataBonito, aes(x=who, fill=survived)) +
geom_bar(alpha=0.8, position="dodge")+
ggtitle("Relación entre qué era y la variable de clase")+
labs(x = "Qué era",y="") +
scale_color_manual(values = colorpieborde, name="who")+
scale_fill_manual(values = colorspie, name="who")
myplot
myplot = ggplot(data=titanicDataBonito, aes(x=alone, fill=survived, color = survived)) +
geom_bar(alpha=0.8, position="dodge")+
ggtitle("Relación entre si viajaba solo y la variable de clase")+
labs(x = "Solo",y="") +
scale_color_manual(values = colorpieborde, name="alone")+
scale_fill_manual(values = colorspie, name="alone")
myplot
myplot = ggplot(data=titanicDataBonito, aes(x=sibsp, fill=survived, color = survived)) +
geom_bar(alpha=0.8, position="dodge")+
ggtitle("Relación entre los parientes que tenía y la variable de clase")+
labs(x = "Sibsp",y="") +
scale_color_manual(values = colorpieborde, name="survived")+
scale_fill_manual(values = colorspie, name="survived")
myplot
myplot = ggplot(data=titanicDataBonito, aes(x=parch, fill=survived, color = survived)) +
geom_bar(alpha=0.8, position="dodge")+
ggtitle("Relación entre si tenía parientes directos y la variable de clase")+
labs(x = "Parch",y="") +
scale_color_manual(values = colorpieborde, name="survived")+
scale_fill_manual(values = colorspie, name="survived")
myplot
table(titanicDataBonito$parch, titanicDataBonito$survived)
titanicDataCategoricas = titanicDataBonito[, c("sex", "who", "class", "sibsp", "parch", "alone", "embarked", "survived")]
mymelt= melt(titanicDataCategoricas, id.vars=8, value.name="FeatureValue", variable.name = "Feature")
ggplot(data=mymelt, aes(x=FeatureValue, fill=survived, color=survived))+
geom_bar(alpha=0.8, position="dodge")+
ggtitle("Relación entre variables categóricas y la variable de clase")+
scale_color_manual(values = colorpieborde, name="Legend")+
scale_fill_manual(values = colorspie, name="Legend")+
facet_wrap(~ Feature, ncol=3, scales = "free")
myplot = ggplot(data=titanicDataBonito, aes(x=age, fill=survived, color = survived)) +
geom_density(alpha=0.8)+
ggtitle("Relación entre la edad y la variable de clase")+
labs(x = "Fare",y="") +
scale_color_manual(values = colorpieborde, name="survived")+
scale_fill_manual(values = colorspie, name="survived")
myplot
edad = cut(titanicData$age, seq(0,90, by=15), right = TRUE)
table(titanicDataBonito$survived, edad)
myplot = ggplot(data=titanicDataBonito, aes(x=fare, fill=survived, color = survived)) +
geom_density(alpha=0.8)+
ggtitle("Relación entre la tarifa y la variable de clase")+
labs(x = "Fare",y="") +
scale_color_manual(values = colorpieborde, name="survived")+
scale_fill_manual(values = colorspie, name="survived")
myplot
tasa = cut(titanicDataBonito$fare, c(0,50,100,150,200,250,300,500,550), right=TRUE)
table(titanicDataBonito$survived, tasa)
titanicDataBonitoContinuas= titanicDataBonito[,c("survived", "age", "fare")]
mymelt=melt(titanicDataBonitoContinuas, id.vars=1, value.name="FeatureValue", variable.name="Feature")
myplot = ggplot(data=mymelt, aes(x=FeatureValue, fill=survived, color = survived)) +
geom_density(alpha=0.8)+
ggtitle("Relación entre las variables continuas y la variable de clase")+
labs(x = "",y="", fill = "") +
scale_color_manual(values = colorpieborde, name="")+
scale_fill_manual(values = colorspie, name="")+
facet_wrap(~ Feature, ncol=2, scales = "free")
myplot
Embarked<- titanicData$embarked
Class <- titanicData$class
intervalos_fare = cut(titanicData$fare, breaks=seq(0, 520, by=100), right = FALSE)
tabla_tridimensional <- xtabs(~ intervalos_fare + Class + Embarked)
#ftable(tabla_tridimensional)
datos <- data.frame(Embarked, Class, intervalos_fare)
ggplot(datos, aes(x=intervalos_fare, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =3)
rm(categoricas); rm(datos); rm(mymelt); rm(myplot);
rm(myplot2); rm(titanicDataBonito); rm(titanicDataBonitoContinuas); rm(titanicDataCategoricas);
rm(edad); rm(intervalos_fare); rm(position); rm(tabla_tridimensional); rm(tasa)
titanicPCA1 = titanicData_noNulesinAge
titanicPCA1$survived = ifelse(titanicPCA1$survived == 0, "Muere",
ifelse(titanicPCA1$survived == 1, "Sobrevive", titanicPCA1$survived))
titanicPCAStatus = titanicPCA1[,10]
titanicPCA1 = titanicPCA1[,1:9]
titanicPCA1$sex = ifelse(titanicPCA1$sex == "male", 1,
ifelse(titanicPCA1$sex == "female", 2, titanicPCA1$sex))
titanicPCA1$sex = as.numeric(titanicPCA1$sex)
#table(titanicPCA1$sex)
# Cambiar las categorías en la columna "class"
titanicPCA1$class <- ifelse(titanicPCA1$class == "First", 1,
ifelse(titanicPCA1$class == "Second", 2,
ifelse(titanicPCA1$class == "Third", 3, titanicPCA1$class)))
titanicPCA1$class = as.numeric(titanicPCA1$class)
#table(titanicData$class)
#table(titanicPCA1$class)
titanicPCA1$who <- ifelse(titanicPCA1$who == "man", 1,
ifelse(titanicPCA1$who == "woman", 2,
ifelse(titanicPCA1$who == "child", 3, titanicPCA1$who)))
titanicPCA1$who = as.numeric(titanicPCA1$who)
#table(titanicData$who)
#table(titanicPCA1$who)
titanicPCA1$alone = ifelse(titanicPCA1$alone == "FALSE", 0, ifelse(titanicPCA1$sex == "TRUE", 1, titanicPCA1$alone))
#table(titanicPCA1$alone)
titanicPCA1$embarked <- ifelse(titanicPCA1$embarked == "S", 1,
ifelse(titanicPCA1$embarked == "Q", 2,
ifelse(titanicPCA1$embarked == "C", 3, titanicPCA1$who)))
titanicPCA1$embarked = as.numeric(titanicPCA1$embarked)
#table(titanicData$embarked)
#table(titanicPCA1$who)
titanicPCA1 = apply(titanicPCA1, 2, scale)
apply(titanicPCA1, 2, mean)
#Para ver que estan centralizados que era lo que se pretendia escalando
apply(titanicPCA1, 2, var)
corrplot::corrplot(cor(titanicPCA1))
titanicpca1.cov = cov(titanicPCA1)
titanic.eigen = eigen(titanicpca1.cov)
str(titanic.eigen)
(loadings=titanic.eigen$vectors[,1:2])
loadings = loadings
row.names(loadings)= c("sex", "age", "sibsp", "parch", "fare", "embarked", "class", "who", "alone")
colnames(loadings) = c("Z1", "Z2")
Z1 = as.matrix(titanicPCA1) %*% loadings[,1]
Z2 = as.matrix(titanicPCA1) %*% loadings[,2]
PC <- data.frame(Status=titanicPCAStatus, Z1, Z2)
p <- ggplot(PC, aes(Z1, Z2, color = titanicPCAStatus, shape = titanicPCAStatus)) +
geom_point(size = 1) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
p <- p + theme_minimal() +
theme(legend.position = "top")
p
PVE <- titanic.eigen$values / sum(titanic.eigen$values)
round(PVE,2)
pca_result <- prcomp(titanicPCA1, scale = TRUE)
pcas = as.data.frame(pca_result$x,stringsAsFactors=F)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
# Gráfico de componentes principales para cada estado
ggplot(pcas, aes(PC1, PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = SURVIVED), size = 3) +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
biplot(pca_result, scale = 0,cex=0.7)
#vemos que los resultados representan lo mismo para la varianza
(VE <- pca_result$sdev^2)
PVE <- VE / sum(VE)
round(PVE, 2)
pcas = as.data.frame(pca_result$x)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
# Gráfico de componentes principales para cada estado
ggplot(pcas, aes(PC1, PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = SURVIVED), size = 3) +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
biplot(pca_result, scale = 0,cex=0.7)
#vemos que los resultados representan lo mismo para la varianza
(VE <- pca_result$sdev^2)
biplot(pca_result, scale = 0,cex=0.7)
pcas = as.data.frame(pca_result$x, stringsAsFactors = "FALSE")
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
biplot(pca_result, scale = 0,cex=0.7)
pca_result <- prcomp(titanicPCA1, scale = TRUE)
pcas = as.data.frame(pca_result$x, stringsAsFactors =F)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
biplot(pca_result, scale = 0,cex=0.7)
pca_result <- prcomp(titanicPCAOriginal, scale = TRUE)
pcas = as.data.frame(pca_result$x, stringsAsFactors =F)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
# Gráfico de componentes principales para cada estado
ggplot(pcas, aes(PC1, PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = SURVIVED), size = 3) +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
biplot(pca_result, scale = 0,cex=0.7)
names(pca_result)
row.value(pca_result)
rowvalue(pca_result)
row.names(pca_result)
row.names(pca_result)
pca_result
row.names(pca_result$x)
pca_result$x
row.names(pca_result$x) = titanicPCAStatus
pcas = as.data.frame(pca_result$x, stringsAsFactors =F)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
biplot(pca_result, scale = 0,cex=0.7)
titanicPCA1 = titanicData_noAge
titanicPCA1$survived = ifelse(titanicPCA1$survived == 0, "Muere",
ifelse(titanicPCA1$survived == 1, "Sobrevive", titanicPCA1$survived))
titanicPCAStatus = titanicPCA1[,10]
titanicPCA1 = titanicData_noAge
titanicPCA1$survived = ifelse(titanicPCA1$survived == 0, "Muere",
ifelse(titanicPCA1$survived == 1, "Sobrevive", titanicPCA1$survived))
titanicPCAStatus = titanicPCA1[,10]
titanicPCA1 = titanicData_noAge
titanicPCA1$survived = ifelse(titanicPCA1$survived == 0, "Muere",
ifelse(titanicPCA1$survived == 1, "Sobrevive", titanicPCA1$survived))
titanicPCAStatus = titanicPCA1[,9]
titanicPCA1 = titanicPCA1[,1:8]
titanicPCA1$sex = ifelse(titanicPCA1$sex == "male", 1,
ifelse(titanicPCA1$sex == "female", 2, titanicPCA1$sex))
titanicPCA1$sex = as.numeric(titanicPCA1$sex)
#table(titanicPCA1$sex)
# Cambiar las categorías en la columna "class"
titanicPCA1$class <- ifelse(titanicPCA1$class == "First", 1,
ifelse(titanicPCA1$class == "Second", 2,
ifelse(titanicPCA1$class == "Third", 3, titanicPCA1$class)))
titanicPCA1$class = as.numeric(titanicPCA1$class)
#table(titanicData$class)
#table(titanicPCA1$class)
titanicPCA1$who <- ifelse(titanicPCA1$who == "man", 1,
ifelse(titanicPCA1$who == "woman", 2,
ifelse(titanicPCA1$who == "child", 3, titanicPCA1$who)))
titanicPCA1$who = as.numeric(titanicPCA1$who)
#table(titanicData$who)
#table(titanicPCA1$who)
titanicPCA1$alone = ifelse(titanicPCA1$alone == "FALSE", 0, ifelse(titanicPCA1$sex == "TRUE", 1, titanicPCA1$alone))
#table(titanicPCA1$alone)
titanicPCA1$embarked <- ifelse(titanicPCA1$embarked == "S", 1,
ifelse(titanicPCA1$embarked == "Q", 2,
ifelse(titanicPCA1$embarked == "C", 3, titanicPCA1$who)))
titanicPCA1$embarked = as.numeric(titanicPCA1$embarked)
#table(titanicData$embarked)
#table(titanicPCA1$who)
titanicPCA1 = apply(titanicPCA1, 2, scale)
apply(titanicPCA1, 2, mean)
#Para ver que estan centralizados que era lo que se pretendia escalando
apply(titanicPCA1, 2, var)
corrplot::corrplot(cor(titanicPCA1))
titanicpca1.cov = cov(titanicPCA1)
titanic.eigen = eigen(titanicpca1.cov)
str(titanic.eigen)
(loadings=titanic.eigen$vectors[,1:2])
loadings = loadings
row.names(loadings)= c("sex", "age", "sibsp", "parch", "fare", "embarked", "class", "who", "alone")
titanicpca1.cov = cov(titanicPCA1)
titanic.eigen = eigen(titanicpca1.cov)
str(titanic.eigen)
(loadings=titanic.eigen$vectors[,1:2])
loadings = loadings
row.names(loadings)= c("sex", "sibsp", "parch", "fare", "embarked", "class", "who", "alone")
colnames(loadings) = c("Z1", "Z2")
Z1 = as.matrix(titanicPCA1) %*% loadings[,1]
Z2 = as.matrix(titanicPCA1) %*% loadings[,2]
PC <- data.frame(Status=titanicPCAStatus, Z1, Z2)
p <- ggplot(PC, aes(Z1, Z2, color = titanicPCAStatus, shape = titanicPCAStatus)) +
geom_point(size = 2) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
p <- p + theme_minimal() +
theme(legend.position = "top")
p
PVE <- titanic.eigen$values / sum(titanic.eigen$values)
round(PVE,2)
pca_result <- prcomp(titanicPCA1, scale = TRUE)
row.names(pca_result$x) = titanicPCAStatus
pcas = as.data.frame(pca_result$x, stringsAsFactors =F)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
# Gráfico de componentes principales para cada estado
ggplot(pcas, aes(PC1, PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = SURVIVED), size = 3) +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
biplot(pca_result, scale = 0,cex=0.7)
#vemos que los resultados representan lo mismo para la varianza
(VE <- pca_result$sdev^2)
PVE <- VE / sum(VE)
round(PVE, 2)
pca_result <- prcomp(titanicPCA1, scale = TRUE)
row.names(pca_result$x) = titanicPCAStatus
pcas = as.data.frame(pca_result$x, stringsAsFactors =F)
pcas = cbind(SURVIVED = titanicPCAStatus,pcas)
# Gráfico de componentes principales para cada estado
ggplot(pcas, aes(PC1, PC2)) +
modelr::geom_ref_line(h = 0) +
modelr::geom_ref_line(v = 0) +
geom_text(aes(label = SURVIVED), size = 1) +
xlab("First Principal Component") +
ylab("Second Principal Component") +
ggtitle("First Two Principal Components of USArrests Data")
biplot(pca_result, scale = 0,cex=0.7)
#vemos que los resultados representan lo mismo para la varianza
(VE <- pca_result$sdev^2)
PVE <- VE / sum(VE)
round(PVE, 2)
titanicPCA1 = titanicData_predict
titanicPCA1 = titanicData_predict
titanicPCA1$survived = ifelse(titanicPCA1$survived == 0, "Muere",
ifelse(titanicPCA1$survived == 1, "Sobrevive", titanicPCA1$survived))
titanicPCAStatus = titanicPCA1[,10]
titanicPCA1 = titanicPCA1[,1:9]
titanicPCA1$sex = ifelse(titanicPCA1$sex == "male", 1,
ifelse(titanicPCA1$sex == "female", 2, titanicPCA1$sex))
titanicPCA1$sex = as.numeric(titanicPCA1$sex)
#table(titanicPCA1$sex)
# Cambiar las categorías en la columna "class"
titanicPCA1$class <- ifelse(titanicPCA1$class == "First", 1,
ifelse(titanicPCA1$class == "Second", 2,
ifelse(titanicPCA1$class == "Third", 3, titanicPCA1$class)))
titanicPCA1$class = as.numeric(titanicPCA1$class)
#table(titanicData$class)
#table(titanicPCA1$class)
titanicPCA1$who <- ifelse(titanicPCA1$who == "man", 1,
ifelse(titanicPCA1$who == "woman", 2,
ifelse(titanicPCA1$who == "child", 3, titanicPCA1$who)))
titanicPCA1$who = as.numeric(titanicPCA1$who)
#table(titanicData$who)
#table(titanicPCA1$who)
titanicPCA1$alone = ifelse(titanicPCA1$alone == "FALSE", 0, ifelse(titanicPCA1$sex == "TRUE", 1, titanicPCA1$alone))
#table(titanicPCA1$alone)
titanicPCA1$embarked <- ifelse(titanicPCA1$embarked == "S", 1,
ifelse(titanicPCA1$embarked == "Q", 2,
ifelse(titanicPCA1$embarked == "C", 3, titanicPCA1$who)))
titanicPCA1$embarked = as.numeric(titanicPCA1$embarked)
#table(titanicData$embarked)
#table(titanicPCA1$who)
titanicPCA1 = apply(titanicPCA1, 2, scale)
apply(titanicPCA1, 2, mean)
#Para ver que estan centralizados que era lo que se pretendia escalando
apply(titanicPCA1, 2, var)
corrplot::corrplot(cor(titanicPCA1))
titanicpca1.cov = cov(titanicPCA1)
titanic.eigen = eigen(titanicpca1.cov)
load("C:/Users/USUARIO/Desktop/1er CUATRI/Aprendizaje Computacional/practicas/SesionV/SesionVCaret.Rmd")
setwd("C:/Users/USUARIO/Desktop/1er CUATRI/Aprendizaje Computacional/practicas/SesionV")
knitr::opts_chunk$set(echo = TRUE)
library(caret)
library(mlbench)
data("PimaIndiansDiabetes")
# Usamos el dataset PimaIndiansDiabetes y hacemos una partición al 80%
pima.Datos.Todo = PimaIndiansDiabetes
dim(pima.Datos.Todo)
pima.Var.Salida.Usada = c("diabetes")
pima.Vars.Entrada.Usadas = setdiff(names(pima.Datos.Todo),pima.Var.Salida.Usada)
set.seed(1234)
pima.TrainIdx.80<- createDataPartition(pima.Datos.Todo[[pima.Var.Salida.Usada]],
p=0.8, #Genera un 80% para train, 20% para test
list = FALSE, #Dame los resultados en una matriz
times = 1) #Genera solamente una partición 80/20
str(pima.TrainIdx.80) #Como podemos ver, es una matriz de una columna, con 615 ejemplares
pima.Datos.Train<-pima.Datos.Todo[pima.TrainIdx.80,]
pima.Datos.Test<-pima.Datos.Todo[-pima.TrainIdx.80,]
system.time(
pima.modelo.bstrp25.lda<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='lda'))
system.time(
pima.modelo.bstrp25.glm<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='glm'))
system.time(
pima.modelo.bstrp25.rpart<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='rpart'))
system.time(
pima.modelo.bstrp25.rf<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='rf'))
pima.modelo.bstrp25.rpart
pima.modelo.bstrp25.lda
MLmetrics::Accuracy(predict(pima.modelo.bstrp25.lda,
pima.Datos.Train[pima.Vars.Entrada.Usadas]),
pima.Datos.Train[[pima.Var.Salida.Usada]])
MLmetrics::Accuracy(predict(pima.modelo.bstrp25.lda,
pima.Datos.Test[pima.Vars.Entrada.Usadas]),
pima.Datos.Test[[pima.Var.Salida.Usada]])
#Ejemplo para Stochastic gradient boosting
#Algoritmo gradient boosting machine
modelLookup(("gbm"))
pima.TrainCtrl.3cv10 <- trainControl(## Crosvalidación de 10 pliegues
method = "repeatedcv",
number = 10,
## con 3 repeticiones
repeats = 3,
# Que muestre información mientras entrena
verboseIter=T)
pima.modelo.3cv10.lda<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='lda', trControl=pima.TrainCtrl.3cv10)
pima.modelo.3cv10.glm<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='glm', trControl=pima.TrainCtrl.3cv10)
pima.modelo.3cv10.rpart<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='rpart', trControl=pima.TrainCtrl.3cv10)
pima.modelo.3cv10.rf<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='rf', trControl=pima.TrainCtrl.3cv10)
pima.modelo.3cv10.svm.Kappa<-train(pima.Datos.Train[pima.Vars.Entrada.Usadas],
pima.Datos.Train[[pima.Var.Salida.Usada]],
method='svmRadial',
metric = "Kappa",
trControl=pima.TrainCtrl.3cv10)
pima.modelo.3cv10.svm.Kappa
data(iris)
iris.Datos.Todo<-iris
iris.Var.Salida.Usada<-c("Species")
iris.Vars.Entrada.Usadas<-setdiff(names(iris.Datos.Todo),
iris.Var.Salida.Usada)
iris.Vars.Entrada.Escaladas<-iris.Vars.Entrada.Usadas
iris.trainIdx.80<- createDataPartition(iris.Datos.Todo[[iris.Var.Salida.Usada]],
p=0.8,
list = FALSE,
times = 1)
iris.Datos.Train<-iris.Datos.Todo[iris.trainIdx.80,]
iris.Datos.Test<-iris.Datos.Todo[-iris.trainIdx.80,]
iris.TrainCtrl.3cv10.mltClssSmmry <- trainControl(
## Crosvalidación de 10 pliegues
method = "repeatedcv",
number = 10,
## con 3 repeticiones
repeats = 3,
# Esta vez mejor sin verbose
verboseIter=F,
summaryFunction = multiClassSummary
)
iris.modelo.3cv10.svm.mltClssSmmry<-train(iris.Datos.Train[iris.Vars.Entrada.Usadas],
iris.Datos.Train[[iris.Var.Salida.Usada]],
method='svmRadial',
trControl=iris.TrainCtrl.3cv10.mltClssSmmry)
iris.modelo.3cv10.svm.mltClssSmmry
