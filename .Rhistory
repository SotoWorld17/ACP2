facet_wrap(~ Class, ncol =2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
Embarked<- (!is.na(titanicData$embarked))
Embarked<- (!is.na(titanicData$embarked))
Class <- titanicData$class
intervalos_fare = cut(titanicData$fare, breaks=seq(0, 520, by=20), right = FALSE)
tabla_tridimensional <- xtabs(~ intervalos_fare + Class + Embarked)
#ftable(tabla_tridimensional)
datos <- data.frame(Embarked, Class, intervalos_fare)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 100, by=10), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos, aes(x=intervalos_fare, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
count(is.na(titanicData$embarked))
sum(is.na(titanicData$embarked))
Embarked<- titanicData$embarked
Class <- titanicData$class
intervalos_fare = cut(titanicData$fare, breaks=seq(0, 520, by=20), right = FALSE)
tabla_tridimensional <- xtabs(~ intervalos_fare + Class + Embarked)
#ftable(tabla_tridimensional)
datos <- data.frame(Embarked, Class, intervalos_fare)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 100, by=10), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos, aes(x=intervalos_fare, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
datos <- data.frame(Embarked, Class, intervalos_fare)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 100, by=10), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos, aes(x=intervalos_fare, color=Class, fill=Class)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Class") +
scale_color_manual(values = colorpieborde, name = "Class") +
scale_fill_manual(values = colorspie, name = "Class")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Embarked, ncol =2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 100, by=5), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 80, by=5), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 80, by=10), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
intervalos_fare2 = cut(titanicData$fare, breaks=seq(0, 80, by=10), right = FALSE)
datos2 = data.frame(Embarked, Class, intervalos_fare2)
ggplot(datos2, aes(x=intervalos_fare2, color=Embarked, fill=Embarked)) +
geom_bar(alpha=0.9, position="dodge") +
ggtitle("Relación de precio y embarque para cada clase")+
labs(x = "Intervalos de Fare",y="", fill = "Embarked") +
scale_color_manual(values = colorpieborde, name = "Embarked") +
scale_fill_manual(values = colorspie, name = "Embarked")+
theme(axis.text.x = element_text(angle = 60, hjust = 1, size=8), legend.position = "bottom")+
facet_wrap(~ Class, ncol =2)
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver", repos = c(
reditorsupport = "https://reditorsupport.r-universe.dev",
getOption("repos")
))
install.packages("")
install.packages("")
install.packages("languageserver")
install.packages("pando")
install.packages("pandoc")
Sys.setenv(RSTUDIO_PANDOC = "C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools")
knit_with_parameters("C:/Users/Soto/Desktop/Uni/AC/practicas/ACP2/Practica2.Rmd")
knitr::opts_chunk$set(echo = TRUE)
spotify <- read.csv("spoti.csv")
View(spotify)
spotify <- read.csv("spoti.csv", sep=",")
View(spotify)
spotify <- read.csv("spoti.csv")
View(spotify)
knitr::opts_chunk$set(echo = TRUE)
colorspie <- c("skyblue", "plum3", "pink2", "sandybrown", "palegreen3")
colorpieborde <- c("skyblue4", "plum4", "pink3", "salmon3", "palegreen4")
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(reshape2)
library(GGally)
library(ggfortify)
library(caret)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(plotly)
library(mlbench)
library(rpart.plot)
library(Metrics)
#library(keras)
#library(tensorflow)
search(keras)
search('keras')
detach("package:keras", unload = TRUE)
detach("package:tensorflow", unload = TRUE)
knitr::opts_chunk$set(echo = TRUE)
colorspie <- c("skyblue", "plum3", "pink2", "sandybrown", "palegreen3")
colorpieborde <- c("skyblue4", "plum4", "pink3", "salmon3", "palegreen4")
set.seed(123)
# Definir las variables de entrada y salida
spotiKNN.Var.Salida.Usada <- c("popularity_group")
spotiKNN.Vars.Entrada.Usadas <- setdiff(names(spotiNormalizadoCL), spotiKNN.Var.Salida.Usada)
library(ggplot2)
library(tidyverse)
library(gridExtra)
library(reshape2)
library(GGally)
library(ggfortify)
library(caret)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(plotly)
library(mlbench)
library(rpart.plot)
library(Metrics)
library(keras)
library(tensorflow)
detach("package:keras")
detach("package:tensorflow")
search()
knitr::opts_chunk$set(echo = TRUE)
colorspie <- c("skyblue", "plum3", "pink2", "sandybrown", "palegreen3")
colorpieborde <- c("skyblue4", "plum4", "pink3", "salmon3", "palegreen4")
spotify <- read.csv("spoti.csv", na.strings = "")
summary(spotify)
spotify1 = spotify
#eliminamos columna paises
spotify1 = spotify1[,-c(1,8)]
# Calcula la media de la popularidad para cada canción
mean_popularity <- aggregate(popularity ~ name, data = spotify1, mean)
categories <- cut(spotify1$popularity, breaks = seq(0, 100, by = 10))
barplot(table(categories), main = "Recuento de Canciones por Intervalo de Popularidad", xlab = "Intervalo de Popularidad", ylab = "Recuento", col = colorspie)
#primero convertimos las fechas
spotify1$snapshot_date = as.Date(spotify1$snapshot_date)
spotify1$album_release_date = as.Date(spotify1$album_release_date)
#creamos analysis_data donde hacemos media de todas las variables, ya que si estas tienen algun remix por ejemplo
#cambiaran su valencia, energia pero por muy pocas centesimas.
analysis_data <- aggregate(cbind(popularity, daily_rank, weekly_movement,daily_movement, danceability, energy, loudness, key, speechiness, acousticness, instrumentalness, liveness, valence, tempo, time_signature, duration_ms) ~ name + artists + album_name + is_explicit + album_release_date + mode, data = spotify1, mean)
#ponemos las fechas como minimo, ya que nos interesa cuando entraron a la lista por primera vez
analysis_data2 <- aggregate(cbind(snapshot_date) ~  name + artists + album_name + is_explicit + album_release_date + mode , data = spotify1, min)
analysis_data$snapshot_date = analysis_data2$snapshot_date
analysis_data$popularity_group <- cut(analysis_data$popularity, breaks = c(0, 40, 80, 100), labels = c("Poco Conocida", "Popular", "Muy Popular"),include.lowest = TRUE)
analysis_data$popularity_group <- factor(analysis_data$popularity_group, levels = c("Poco Conocida", "Popular", "Muy Popular"))
analysis_data$key = factor(analysis_data$key)
myplot <- ggplot(data = analysis_data, aes(x = key, fill = popularity_group, color = popularity_group)) +
geom_bar(alpha = 0.8, position = "dodge") +
ggtitle("Relación entre la clave y la popularidad") +
labs(x = "Key", y = "", fill = "Popularity Group") +
scale_color_manual(values = colorpieborde, name = "Popularity Group") +
scale_fill_manual(values = colorspie, name = "Popularity Group")
myplot
table(analysis_data$popularity_group, analysis_data$key)
analysis_data$mode = factor(analysis_data$mode)
myplot <- ggplot(data = analysis_data, aes(x = mode, fill = popularity_group, color = popularity_group)) +
geom_bar(alpha = 0.8, position = "dodge") +
ggtitle("Relación entre el modo y la popularidad") +
labs(x = "Mode", y = "", fill = "Popularity Group") +
scale_color_manual(values = colorpieborde, name = "Popularity Group") +
scale_fill_manual(values = colorspie, name = "Popularity Group")
myplot
table(analysis_data$popularity_group, analysis_data$mode)
analysis_data$is_explicit = factor(analysis_data$is_explicit)
myplot <- ggplot(data = analysis_data, aes(x = is_explicit, fill = popularity_group, color = popularity_group)) +
geom_bar(alpha = 0.8, position = "dodge") +
ggtitle("Relación entre el modo y la popularidad") +
labs(x = "Explicita", y = "", fill = "Popularity Group") +
scale_color_manual(values = colorpieborde, name = "Popularity Group") +
scale_fill_manual(values = colorspie, name = "Popularity Group")
myplot
table(analysis_data$popularity_group, analysis_data$is_explicit)
analysis_datasorted = analysis_data[order(-analysis_data$popularity),]
N<-10
artistastop = analysis_datasorted$artists[1:10]
cat("Artistas más populares\n")
artistastop
popularity_counts <- table(analysis_datasorted$artists)
cat("Número de canciones en el dataset para cada artista:\n")
for (artist in artistastop) {
cat(artist, ":", popularity_counts[artist], "canciones en la lista\n")
}
canciones <- data.frame(
Artista = analysis_datasorted$artists[1:10],
Nombre = analysis_datasorted$name[1:10],
Álbum = analysis_datasorted$album_name[1:10]
)
canciones
analysis_data$daily_rank = round(analysis_data$daily_rank)
analysis_data$daily_rank_group <- cut(analysis_data$daily_rank, breaks = c(0, 10, 20, 30, 40, 50), labels = c("Top 10", "Top 20", "Top 30", "Top 40", "Top 50"),include.lowest = TRUE)
myplot = ggplot(data=analysis_data, aes(x=daily_rank_group, fill=popularity_group, color = popularity_group)) +
geom_bar(alpha=0.8, position="dodge")+
labs(x = "Daily_Rank",y="") +
scale_color_manual(values = colorpieborde, name="popularity")+
scale_fill_manual(values = colorspie, name="popularity")
myplot
analysis_data$daily_movement = round(analysis_data$daily_movement)
analysis_data$daily_movement_group <- cut(analysis_data$daily_movement, breaks = c(-10, 0, 5, 10, 20, 30, 40, 50), labels = c("Baja puestos", "Se mantiene", "Sube puestos", "Sube bastantes puestos", "Sube muchos", "Se hace famosísima de repente", "Da un boom"),include.lowest = TRUE)
myplot = ggplot(data=analysis_data, aes(x=daily_movement_group, fill=popularity_group, color = popularity_group)) +
geom_bar(alpha=0.8, position="dodge")+
labs(x = "Daily Movemente",y="") +
scale_color_manual(values = colorpieborde, name="popularity")+
scale_fill_manual(values = colorspie, name="popularity")+
theme(axis.text.x = element_text(angle = 15, hjust = 1))
myplot
analysis_data$weekly_movement = round(analysis_data$weekly_movement)
analysis_data$weekly_movement_group <- cut(analysis_data$weekly_movement, breaks = c(-20, 0, 5, 10, 20, 30, 40, 80), labels = c("Baja puestos", "Se mantiene", "Sube puestos", "Sube bastantes puestos", "Sube muchos", "Se hace famosísima de repente", "Da un boom"),include.lowest = TRUE)
myplot = ggplot(data=analysis_data, aes(x=weekly_movement_group, fill=popularity_group, color = popularity_group)) +
geom_bar(alpha=0.8, position="dodge")+
labs(x = "Weekly Movemente",y="") +
scale_color_manual(values = colorpieborde, name="popularity")+
scale_fill_manual(values = colorspie, name="popularity")+
theme(axis.text.x = element_text(angle = 15, hjust = 1))
myplot
analysis_data$snapshot_date = as.Date(analysis_data$snapshot_date)
analysis_data$album_release_date = as.Date(analysis_data$album_release_date)
diferencia_dias = as.numeric(analysis_data$snapshot_date - analysis_data$album_release_date)
analysis_data$numDiasFama = diferencia_dias
analysis_data$numDiasFama = ifelse(analysis_data$numDiasFama <= 0, 0, analysis_data$numDiasFama)
analysis_data$numDiasFama_group <- cut(analysis_data$numDiasFama, breaks = c(-1, 1, 10, 30, 60, 90, 120, 99999), labels = c("Entra al salir", "10 dias", "1 mes", "2 meses", "3 meses", "4 meses", "+"),include.lowest = TRUE)
sum(is.na(analysis_data$numDiasFama))
sum(is.na(analysis_data$numDiasFama_group))
myplot = ggplot(data=analysis_data, aes(x=numDiasFama_group, fill=popularity_group, color = popularity_group)) +
geom_bar(alpha=0.8, position="dodge")+
labs(x = "Número Días Hasta Dataset",y="") +
scale_color_manual(values = colorpieborde, name="popularity")+
scale_fill_manual(values = colorspie, name="popularity")
myplot
analysisContinuas= analysis_data[ , c("popularity_group", "duration_ms", "danceability","energy", "loudness", "speechiness", "acousticness", "liveness", "instrumentalness", "valence", "tempo")]
mymelt=melt(analysisContinuas, id.vars=1, value.name="FeatureValue", variable.name="Feature")
myplot = ggplot(data=mymelt, aes(x=FeatureValue, fill=popularity_group, color = popularity_group)) +
geom_density(alpha=0.8)+
ggtitle("Relación entre las variables continuas y la variable de clase")+
labs(x = "",y="", fill = "") +
scale_color_manual(values = colorpieborde, name="")+
scale_fill_manual(values = colorspie, name="")+
facet_wrap(~ Feature, ncol=3, scales = "free")
myplot
analysisContinuas= analysis_data[ , c("duration_ms", "danceability","energy", "loudness", "speechiness", "acousticness", "liveness", "instrumentalness", "valence", "tempo")]
corrplot::corrplot(cor(analysisContinuas))
myplot = ggplot(data=analysis_data, aes(x=time_signature, fill=popularity_group, color = popularity_group)) +
geom_bar(alpha=0.8, position="dodge")+
labs(x = "Time Signature",y="") +
scale_color_manual(values = colorpieborde, name="popularity")+
scale_fill_manual(values = colorspie, name="popularity")
myplot
analysis_pca = analysisContinuas
analysis_pca$daily_rank = analysis_data$daily_rank
analysis_pca$weekly_movement = analysis_data$weekly_movement
analysis_pca$daily_movement = analysis_data$daily_movement
analysis_pca$time_signature = analysis_data$time_signature
analysis_pca$numDiasFama = analysis_data$numDiasFama
analysis_pca_estatus = analysis_data$popularity_group
# PCA
pca_result <- prcomp(analysis_pca, scale = TRUE)
row.names(pca_result$x) = analysis_pca_estatus
pcas = as.data.frame(pca_result$x, stringsAsFactors =F)
pcas = cbind(ESTATUS = analysis_pca_estatus,pcas)
ggplot(pcas, aes(PC1, PC2, color = ESTATUS, shape=ESTATUS)) +
geom_point(size = 1, alpha=0.6) +
geom_hline(yintercept = 0, linetype = "dashed") +
geom_vline(xintercept = 0, linetype = "dashed") +
scale_color_manual(values = colorspie) +
scale_shape_manual(values = c(17, 16, 15)) +
xlab("Primera componente principal") +
ylab("Segunda componente principal") +
ggtitle("Las dos primeras componentes principales de titanicData") +
guides(color = guide_legend(title = "Estado de Popularidad"), shape = guide_legend(title = "Estado de Popularidad")) +
theme_minimal() +
theme(legend.position = "top")
autoplot(pca_result, data=analysis_data, cex = 0.7, alpha=0.6, color = "popularity_group",
loadings = TRUE, loadings.colour = 'gold',
loadings.label = TRUE, loadings.label.size = 4, loadings.label.colour = 'mediumvioletred')
fviz_pca_var(pca_result, col.var = "contrib",
gradient.cols = c("white", "blue", "red"),
repel = TRUE)
(VE <- pca_result$sdev^2)
PVE <- VE / sum(VE)
cumsum(round(PVE, 2))
rm(analysis_data, analysis_data2, analysis_datasorted,mean_popularity, canciones, mymelt, artist, pcas, pca_result, spotify_mean, spotify1, world, world_spotify, myplot, maps, analysisContinuas, analysis_pca, analysis_pca_estatus, artistastop, categories, diferencia_dias, N, popularity_counts, PVE, variables, VE)
spotify = spotify[,-1]
spotify$mode = factor(spotify$mode)
spotify$key = factor(spotify$key)
spotify$time_signature = factor(spotify$time_signature)
spotify$album_release_date = as.Date(spotify$album_release_date)
spotify$snapshot_date = as.Date(spotify$snapshot_date)
colSums(is.na(spotify))
table(is.na(spotify$name), is.na(spotify$artists))
table(is.na(spotify$album_release_date), is.na(spotify$album_name))
table(is.na(spotify$name), is.na(spotify$album_name))
spotify <- spotify[complete.cases(spotify$album_release_date), ]
colSums(is.na(spotify))
table(is.na(spotify$country))
spotify <- spotify[complete.cases(spotify$country), ]
analysisContinuas= spotify[ , c("popularity", "duration_ms", "danceability","energy", "loudness", "speechiness", "acousticness", "liveness", "instrumentalness", "valence", "tempo")]
mymelt=melt(analysisContinuas, id.vars=1, value.name="FeatureValue", variable.name="Feature")
unique_features <- unique(mymelt$Feature)
num_columns <- 5
num_rows <- ceiling(length(unique_features) / num_columns)
plots_list <- list()
# Tamaño total de la cuadrícula
total_width <- 15
total_height <- 20
single_plot_width <- total_width / num_columns
single_plot_height <- total_height / num_rows
# Itera a través de cada característica
for (i in seq_along(unique_features)) {
subset_data <- mymelt[mymelt$Feature == unique_features[i], ]
current_color <- colorspie[(i - 1) %% length(colorspie) + 1]
# Crea el gráfico con ggplot usando los datos filtrados
plot <- ggplot(data=subset_data, aes(x=Feature, y=FeatureValue, color=Feature, fill=Feature)) +
geom_boxplot(alpha=0.6) +
scale_fill_manual(values = current_color) +
scale_color_manual(values = current_color) +
ggtitle(paste(unique_features[i])) +
theme_minimal() +
theme(legend.position="none",
axis.title.x = element_blank(),  # Oculta la etiqueta del eje x
axis.title.y = element_blank())
# Agrega el gráfico a la lista
plots_list[[i]] <- plot
summary(mymelt)
}
# Organiza los gráficos en una cuadrícula y visualízalos
grid.arrange(grobs = plots_list, ncol = num_columns, widths = rep(single_plot_width, num_columns), heights = rep(single_plot_height, num_rows))
analysisContinuas= spotify[ , c( "duration_ms", "danceability","energy", "loudness", "speechiness", "acousticness", "liveness", "instrumentalness", "valence", "tempo")]
iqr_values <- apply(analysisContinuas, 2, function(x) {
q1 <- quantile(x, 0.25)
q3 <- quantile(x, 0.75)
iqr <- q3 - q1
limite_inferior <- q1 - 1.5 * iqr
limite_superior <- q3 + 1.5 * iqr
outliers_count <- sum(x < limite_inferior | x > limite_superior)
return(list(Q1 = q1, Q3 = q3, IQR = iqr, LimiteInferior = limite_inferior, LimiteSuperior = limite_superior, Outliers = outliers_count))
})
for (i in seq_along(iqr_values)) {
cat("Variable:", names(iqr_values)[i], "\n")
cat("  Primer cuartil (Q1):", iqr_values[[i]]$Q1, "\n")
cat("  Tercer cuartil (Q3):", iqr_values[[i]]$Q3, "\n")
cat("  IQR:", iqr_values[[i]]$IQR, "\n")
cat("  Límite inferior:", iqr_values[[i]]$LimiteInferior, "\n")
cat("  Límite superior:", iqr_values[[i]]$LimiteSuperior, "\n")
cat("  Número de outliers", iqr_values[[i]]$Outliers, "\n")
cat("\n\n")
}
spotifyEliminacion <- spotify
# Marcamos los datos que eliminaremos de duration_ms
spotifyEliminacion$duration_delete <- if_else(spotifyEliminacion$duration_ms > 570000, TRUE, FALSE)
sum(spotifyEliminacion$duration_ms > 570000)
# Marcamos los datos de loudness
spotifyEliminacion$loudness_delete <- if_else(spotifyEliminacion$loudness > 0 | spotifyEliminacion$loudness< -25, TRUE, FALSE)
sum(spotifyEliminacion$loudness< -25 | spotifyEliminacion$loudness > 0)
# Marcamos los datos de speechiness
spotifyEliminacion$speechiness_delete <- if_else(spotifyEliminacion$speechiness > 0.7, TRUE, FALSE)
sum(spotifyEliminacion$speechiness > 0.7)
# Eliminamos estas filas
spotifyEliminacion <- spotifyEliminacion %>%
filter(!(duration_delete | loudness_delete | speechiness_delete))
spotify <- spotifyEliminacion[, 1:25]
rm(spotifyEliminacion); rm(subset_data);
songFeatures <-  c('danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms')
spotiNormalizado = spotify
min_max_normalize <- function(x) {
(x - min(x)) / (max(x) - min(x)) * 2 - 1
}
spotiNormalizado[, songFeatures] <- lapply(spotiNormalizado[, songFeatures], min_max_normalize)
masDatos <- c('daily_movement', 'weekly_movement', 'daily_rank')
spotiNormalizado[, masDatos] <- lapply(spotiNormalizado[, masDatos  ], min_max_normalize)
spotiNormalizadoZScore = spotify
songFeaturestoNorm = c('danceability', 'energy', 'loudness', 'speechiness', 'acousticness', 'instrumentalness', 'liveness', 'valence', 'tempo', 'duration_ms', 'daily_movement', 'weekly_movement', 'daily_rank')
spotiNormalizadoZScore[, songFeaturestoNorm] <- scale(spotiNormalizadoZScore[, songFeaturestoNorm],center = TRUE, scale = TRUE)
diferencia_dias = as.numeric(spotify$snapshot_date - spotify$album_release_date)
spotify$diferencia_dias = diferencia_dias
spotify$diferencia_dias = ifelse(spotify$diferencia_dias < 0, 0, spotify$diferencia_dias)
spotify <- spotify %>%
group_by(spotify_id,country) %>%
arrange(snapshot_date) %>%
mutate(between_week_prev_popularity = if_else(row_number() == 1, popularity, if_else((snapshot_date - lag(snapshot_date)>1 & (snapshot_date - lag(snapshot_date)<=7)) , lag(popularity), 0)))
spotify <- spotify %>%
group_by(spotify_id,country) %>%
arrange(snapshot_date) %>%
mutate(day_prev_popularity = if_else(row_number() == 1, 0, if_else(snapshot_date - lag(snapshot_date) == 1, lag(popularity), 0)))
epsilon <- 1e-10
# Calcular velocidad_popularidad con epsilon para evitar divisiones entre 0
spotify$velocidad_popularidad <-  1 / (spotify$diferencia_dias + epsilon)
eliminar = c("spotify_id", "name", "artists", "album_name", "album_release_date")
eliminar = c("spotify_id", "name", "artists", "album_name", "album_release_date","snapshot_date")
eliminar = c("spotify_id", "name", "artists", "album_name", "album_release_date","snapshot_date", "country")
spotify = spotify[, !names(spotify) %in% eliminar]
spotiNormalizado = spotiNormalizado[, !names(spotiNormalizado) %in% eliminar]
spotiNormalizadoZScore = spotiNormalizadoZScore[, !names(spotiNormalizadoZScore) %in% eliminar]
nuevas_columnas = c('diferencia_dias', 'between_week_prev_popularity','day_prev_popularity', 'velocidad_popularidad')
spotiNormalizado[nuevas_columnas] <- spotify[, nuevas_columnas]
spotiNormalizadoZScore[nuevas_columnas] <- spotify[, nuevas_columnas]
spotifyNoMovements = spotify
eliminar = c("daily_rank", "daily_movement", "weekly_movement")
spotifyNoMovements = spotifyNoMovements[, !names(spotify) %in% eliminar]
spotifyNormNoMovements = spotiNormalizado
spotifyNormNoMovements = spotiNormalizado[,!names(spotiNormalizado) %in% eliminar ]
spotifyNormNoMovementsZScore = spotiNormalizadoZScore
spotifyNormNoMovementsZScore = spotiNormalizadoZScore[,!names(spotiNormalizado) %in% eliminar ]
#SAVE POINT PARA CUANDO LA CAGO. BORRAR  Y LO DE ABAJO
savePoint = spotify
intervalos <- c(0, 30, 60, 90, 101)
spotify2 = spotify
spotify2$popularity <- cut(spotify2$popularity, breaks = intervalos, labels = c("nada popular", "poco popular", "algo popular", "hit"), include.lowest = TRUE, right = FALSE)
spotify2$popularity = as.factor(spotify2$popularity)
rangerInfo = getModelInfo("ranger")
rangerInfo = rangerInfo$ranger
rangerInfo$parameters
mygrid <- expand.grid(
mtry = c(4, 5, 6),
splitrule = c("variance", "extratrees"),
min.node.size = c(50, 100, 150))
fitControl <- trainControl(## 10-fold CV
method = "cv",
number = 10)
set.seed(123)
inTraining <- createDataPartition(spotify$popularity, times=1,p = .80, list = FALSE)
training <- spotify[ inTraining,]
testing  <- spotify[-inTraining,]
rfNoMov
set.seed(123)
# Definir las variables de entrada y salida
spotiKNN.Var.Salida.Usada <- c("popularity_group")
spotiKNN.Vars.Entrada.Usadas <- setdiff(names(spotiNormalizadoCL), spotiKNN.Var.Salida.Usada)
spotiNormalizadoCL <- spotiNormalizado
spotiNormalizadoCL$popularity_group <- cut(spotiNormalizado$popularity,
breaks = c(0, 40, 80, 100),
labels = c("Poco Conocida", "Popular", "Muy Popular"),
include.lowest = TRUE)
spotiNormalizadoCL <- spotiNormalizadoCL[, !names(spotiNormalizadoCL) %in% c("popularity")]
# Definir las variables de entrada y salida
spotiKNN.Var.Salida.Usada <- c("popularity_group")
spotiKNN.Vars.Entrada.Usadas <- setdiff(names(spotiNormalizadoCL), spotiKNN.Var.Salida.Usada)
# Crear una partición del 80% para entrenamiento y 20% para prueba
spotiKNN.Particion <- createDataPartition(spotiNormalizadoCL[[spotiKNN.Var.Salida.Usada]],
p = 0.8,
list = FALSE,
times = 1)
# Crear conjuntos de entrenamiento y prueba
spotiKNN.Datos.Entrenamiento <- spotiNormalizadoCL[spotiKNN.Particion, ]
spotiKNN.Datos.Prueba <- spotiNormalizadoCL[-spotiKNN.Particion, ]
# Usamos cross-validación con 3 repeticiones y las particiones serán 3
ctrl <- trainControl(method = "repeatedcv",
number=3,
repeats = 3)
# Crear modelos utilizando el método train() de Caret
spotiKNN.modelo.knn <- train(popularity_group ~ .,
data = spotiKNN.Datos.Entrenamiento,
method = "knn",
trControl = ctrl,
tuneGrid = expand.grid(k = c(5, 11, 21, 25)))
